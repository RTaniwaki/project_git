###configurações iniciais###

-Criando um usuário:
	git config --global user.name "nome"
	git config --global user.email coloque.o.e-mail

	Obs: utilize --global para ficara "logado" tudo quer for usar com o Git, caso contrário
	retire o --global para "logar" em apenas um projeto específico.

-Editor de texto:
	git config --global core.editor 'C:/caminho/para/o/editor.exe'

	Obs: editor padrão Vi ou Vim. C:\Program Files (x86)\Notepad++

-Ferramenta de diferenciação:
	git config --global merge.tool vimdiff

	Obs: não descobri como abrir o vimdiff. (Git aceita kdiff3, tkdiff, meld, xxdiff, emerge,
	vimdiff, gvimdiff, ecmerge e opendiff)

-Verificação das Configurações:
	git config --list

-Função Help:
	git help comando

	Obs: abre uma pg na web.


###Repositório Git###

-Repositório em Diretório Existente:
	git init
	git add nome.do.arquivo.extensão
	git commit nome.do.arquivo.extensão

	Obs: caso tenham muitos arquivos para serem comitados, utilize o comando -A em 'add' e -a
	em 'commit' para adicional todos os arquivos e comitar todos os arquivos de uma vez.

-Clonar um Repositório:
	git clone endereço:/da/pasta/ou/arquivo/a/ser/copiado NOME

	Obs: nomes de pastas com espaço utilizar "", podem ser clonados repositórios da nuvem 
	e em NOME é possível modificar o nome da pasta destino.


###Comandos essenciais###

-Verificar o Status dos Arquivos:
	git status

-Adicionar arquivos:
	git add NOME.extensão

	Obs: deve-se usar esse comando toda vez que se faz uma alteração no arquivo. É possível verificar
	a necessidade através do comando 'git status'.

-Ignorar arquivos:
	(verificar o comando)

-Visualizar Mudanças:
	git diff --cached

	Obs: exibe o que tem de diferente de uma versão para outra, não está exibindo no vimdiff.

-Comitando as Mudanças:
	git commit NOME.extensão

	Obs: pode usar -a para all, -m 'digite a mensagem'.

-Remover Arquivos:
	rm nome.extensão
	OBS: CUIDADO PARA NÃO APAGAR ARQUIVO ERRADO.
	git rm --cached nome.extensão
	Obs: remove o arquivo apenas do monitoramento do Git. O arquivo permanece no HD.

-Renomear arquivo existente:
	git mv arquivo_original arquivo_destino

-Histórico de Commit's:
	git log
	Obs: -p mostra os diff's de cada commit, pode-se colocar -número para mostras apenas uma 
	quantia exata de commit's, --stat mostra resumo de modificações.
	git log --pretty=format:"%h - %an, %ar : %s"
	Obs: tabela em https://git-scm.com/book/pt-br/v1/Git-Essencial-Visualizando-o-Hist%C3%B3rico-de-Commits

-Limitar saída de Log:
	git log --since=2.weeks

-Usando Interface para Visualizar Histórico:
	abrir o Git Gui da pasta -> repositório -> visualizar ..... Histórico.

-Modificando o Último Commit:
	git commit --amend
	Obs: execute os comandos faltantes e use o --amend no lugar de um commit normal.

-Tirando Arquivo da Área de seleção:
	git reset HEAD nome.extensão
	Obs: para caso você tenha dado um "git add -A",mas não era para selecionar todos.

-Desfazer modificações:
	git checkout -- nome.extensão
	OBS:CUIDADO AO UTILIZAR ESTE COMANDO, POSSÍVEL PERDER MODIFICAÇÕES PERMANENTEMENTE.

###Remotos###

-Exibindo os Remotos:
	git remote -v

-Abreviando o Nome do Repositório Remoto:
	git remote add abreviação endereço:/do/repositório

-Fetch: indica o endereço
	git fetch caminho:/do/remoto
	Obs: podemos usar git fetch abreviação

-Pull: copia para o seu clone o que tem de diferente do repositório original
	git pull
	Obs: eralmente busca os dados do servidor de onde você fez o clone originalmente e automaticamente
	tenta fazer o merge dele no código que você está trabalhando atualmente.

-Push: manda os arquivos do teu clone para o original
	git push nomeRemoto branch
	(não sei utilizar)

-Inspecionar um Remoto:
	git remote show nomeRemoto
	Obs: nomeRemoto é o endereço ou a abreviação feita.

-Removendo e Renomeando Remotos:
	git remote rm abreviação
	git remote rename abreviaçãoVelha abreviaçãoNova


###Tagging###

-Listando as Tags:
	git tag

-Criando Tag:
	-tag anotada:
		git tag -a v1.0 -m 'version 1.0'
	-tag assinada:
		git tag -s v1.0 -m 'ass version 1.0'
		Obs:necessário ter permissão.
-Ver a tag:
	git show v1.0

-Verificando Tag:
	git tag -v v1.0
	Obs: Você precisa da chave pública do assinador no seu chaveiro para este comando funcionar corretamente.

-Tag em Commit:
	git tag -a v1.0 chaveDeVerificação
	Obs: pode ser apenas parte da chave de verificação
